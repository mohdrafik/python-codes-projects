	## MATLAB:                                 NumPy:                                  Notes for each object or functions in given row:
	## a && b                                  a and b                                 short-circuiting logical AND operator (Python native operator); scalar arguments only
	## a || b                                  a or b                                  short-circuiting logical OR operator (Python native operator); scalar arguments only
	## 1*i, 1*j, 1i, 1j                        1j                                      complex numbers                         
	## eps                                     np.finfo(float).eps or np.spacing(1)    distance from 1 to the next larger representable real number in double precision
	## load data.mat                           io.loadmat('data.mat')                  Load MATLAB variables saved to the file data.mat. (Note: When saving arrays to data.mat in MATLAB/Octave, use a recent binary format. scipy.io.loadmat will create a dictionary with the saved arrays and further information.)
	## ode45                                   integrate.solve_ivp(f)                  integrate an ODE with Runge-Kutta 4,5   
	## ode15s                                  integrate.solve_ivp(f, method='BDF')    integrate an ODE with BDF method        
	## ndims(a)                                np.ndim(a) or a.ndim                    number of dimensions of array a         
	## numel(a)                                np.size(a) or a.size                    number of elements of array a           
	## size(a)                                 np.shape(a) or a.shape                  “size” of array a                       
	## size(a,n)                               a.shape[n-1]                            get the number of elements of the n-th dimension of array a. (Note that MATLAB uses 1 based indexing while Python uses 0 based indexing, See note INDEXING)
	## [ 1 2 3; 4 5 6 ]                        np.array([[1., 2., 3.], [4., 5., 6.]])  define a 2x3 2D array                   
	## [ a b; c d ]                            np.block([[a, b], [c, d]])              construct a matrix from blocks a, b, c, and d
	## a(end)                                  a[-1]                                   access last element in MATLAB vector (1xn or nx1) or 1D NumPy array a (length n)
	## a(2,5)                                  a[1, 4]                                 access element in second row, fifth column in 2D array a
	## a(2,:)                                  a[1] or a[1, :]                         entire second row of 2D array a         
	## a(1:5,:)                                a[0:5] or a[:5] or a[0:5, :]            first 5 rows of 2D array a              
	## a(end-4:end,:)                          a[-5:]                                  last 5 rows of 2D array a               
	## a(1:3,5:9)                              a[0:3, 4:9]                             The first through third rows and fifth through ninth columns of a 2D array, a.
	## a([2,4,5],[1,3])                        a[np.ix_([1, 3, 4], [0, 2])]            rows 2,4 and 5 and columns 1 and 3. This allows the matrix to be modified, and doesn’t require a regular slice.
	## a(3:2:21,:)                             a[2:21:2,:]                             every other row of a, starting with the third and going to the twenty-first
	## a(1:2:end,:)                            a[::2, :]                               every other row of a, starting with the first
	## a(end:-1:1,:) or flipud(a)              a[::-1,:]                               a with rows in reverse order            
	## a([1:end 1],:)                          a[np.r_[:len(a),0]]                     a with copy of the first row appended to the end
	## a.'                                     a.transpose() or a.T                    transpose of a                          
	## a'                                      a.conj().transpose() or a.conj().T      conjugate transpose of a                
	## a * b                                   a @ b                                   matrix multiply                         
	## a .* b                                  a * b                                   element-wise multiply                   
	## a./b                                    a/b                                     element-wise divide                     
	## a.^3                                    a**3                                    element-wise exponentiation             
	## (a > 0.5)                               (a > 0.5)                               matrix whose i,jth element is (a_ij > 0.5). The MATLAB result is an array of logical values 0 and 1. The NumPy result is an array of the boolean values False and True.
	## find(a > 0.5)                           np.nonzero(a > 0.5)                     find the indices where (a > 0.5)        
	## a(:,find(v > 0.5))                      a[:,np.nonzero(v > 0.5)[0]]             extract the columns of a where vector v > 0.5
	## a(:,find(v>0.5))                        a[:, v.T > 0.5]                         extract the columns of a where column vector v > 0.5
	## a(a<0.5)=0                              a[a < 0.5]=0                            a with elements less than 0.5 zeroed out
	## a .* (a>0.5)                            a * (a > 0.5)                           a with elements less than 0.5 zeroed out
	## a(:) = 3                                a[:] = 3                                set all values to the same scalar value 
	## y=x                                     y = x.copy()                            NumPy assigns by reference              
	## y=x(2,:)                                y = x[1, :].copy()                      NumPy slices are by reference           
	## y=x(:)                                  y = x.flatten()                         turn array into vector (note that this forces a copy). To obtain the same data ordering as in MATLAB, use x.flatten('F').
	## 1:10                                    np.arange(1., 11.) or np.r_[1.:11.] or np.r_[1:10:10j]create an increasing vector (see note RANGES)
	## 0:9                                     np.arange(10.) or np.r_[:10.] or np.r_[:9:10j]create an increasing vector (see note RANGES)
	## [1:10]'                                 np.arange(1.,11.)[:, np.newaxis]        create a column vector                  
	## zeros(3,4)                              np.zeros((3, 4))                        3x4 two-dimensional array full of 64-bit floating point zeros
	## zeros(3,4,5)                            np.zeros((3, 4, 5))                     3x4x5 three-dimensional array full of 64-bit floating point zeros
	## ones(3,4)                               np.ones((3, 4))                         3x4 two-dimensional array full of 64-bit floating point ones
	## eye(3)                                  np.eye(3)                               3x3 identity matrix                     
	## diag(a)                                 np.diag(a)                              returns a vector of the diagonal elements of 2D array, a
	## diag(v,0)                               np.diag(v, 0)                           returns a square diagonal matrix whose nonzero values are the elements of vector, v
	## rng(42,'twister') rand(3,4)             from numpy.random import default_rng rng = default_rng(42) rng.random(3, 4) or older version: random.rand((3, 4))generate a random 3x4 array with default random number generator and seed = 42
	## linspace(1,3,4)                         np.linspace(1,3,4)                      4 equally spaced samples between 1 and 3, inclusive
	## [x,y]=meshgrid(0:8,0:5)                 np.mgrid[0:9.,0:6.] or np.meshgrid(r_[0:9.],r_[0:6.])two 2D arrays: one of x values, the other of y values
	## ogrid[0:9.,0:6.] or np.ix_(np.r_[0:9.],np.r_[0:6.]the best way to eval functions on a grid[x,y]=meshgrid([1,2,4],[2,4,5])         
	## np.meshgrid([1,2,4],[2,4,5])            np.ix_([1,2,4],[2,4,5])                 the best way to eval functions on a grid
	## repmat(a, m, n)                         np.tile(a, (m, n))                      create m by n copies of a               
	## [a b]                                   np.concatenate((a,b),1) or np.hstack((a,b)) or np.column_stack((a,b)) or np.c_[a,b]concatenate columns of a and b          
	## [a; b]                                  np.concatenate((a,b)) or np.vstack((a,b)) or np.r_[a,b]concatenate rows of a and b             
	## max(max(a))                             a.max() or np.nanmax(a)                 maximum element of a (with ndims(a)<=2 for MATLAB, if there are NaN’s, nanmax will ignore these and return largest value)
	## max(a)                                  a.max(0)                                maximum element of each column of array a
	## max(a,[],2)                             a.max(1)                                maximum element of each row of array a  
	## max(a,b)                                np.maximum(a, b)                        compares a and b element-wise, and returns the maximum value from each pair
	## norm(v)                                 np.sqrt(v @ v) or np.linalg.norm(v)     L2 norm of vector v                     
	## a & b                                   logical_and(a,b)                        element-by-element AND operator (NumPy ufunc) See note LOGICOPS
	## a | b                                   np.logical_or(a,b)                      element-by-element OR operator (NumPy ufunc) See note LOGICOPS
	## bitand(a,b)                             a & b                                   bitwise AND operator (Python native and NumPy ufunc)
	## bitor(a,b)                              a | b                                   bitwise OR operator (Python native and NumPy ufunc)
	## inv(a)                                  linalg.inv(a)                           inverse of square 2D array a            
	## pinv(a)                                 linalg.pinv(a)                          pseudo-inverse of 2D array a            
	## rank(a)                                 np.linalg.matrix_rank(a)                matrix rank of a 2D array a             
	## a\b                                     linalg.solve(a, b) if a is square; linalg.lstsq(a, b) otherwisesolution of a x = b for x               
	## b/a                                     Solve a.T x.T = b.T instead             solution of x a = b for x               
	## [U,S,V]=svd(a)                          U, S, Vh = linalg.svd(a); V = Vh.T      singular value decomposition of a       
	## chol(a)                                 linalg.cholesky(a)                      Cholesky factorization of a 2D array    
	## [V,D]=eig(a)                            D,V = linalg.eig(a)                     eigenvalues λ and eigenvectors v of a, where  av=λv
	## [V,D]=eig(a,b)                          D,V = linalg.eig(a, b)                  eigenvalues λ and eigenvectors v of a, b where av=λv
	## [V,D]=eigs(a,3)                         D,V = eigs(a, k=3)                      find the k=3 largest eigenvalues and eigenvectors of 2D array, a
	## [Q,R]=qr(a,0)                           Q,R = linalg.qr(a)                      QR decomposition                        
	## [L,U,P]=lu(a) where a==P'*L*U           P,L,U = linalg.lu(a) where a == P@L@U   LU decomposition with partial pivoting (note: P(MATLAB) == transpose(P(NumPy)))
	## conjgrad                                cg                                      conjugate gradients solver              
	## fft(a)                                  np.fft.fft(a)                           Fourier transform of a                  
	## ifft(a)                                 np.fft.ifft(a)                          inverse Fourier transform of a          
	## sort(a)                                 np.sort(a) or a.sort(axis=0)            sort each column of a 2D array, a       
	## sort(a, 2)                              np.sort(a, axis=1) or a.sort(axis=1)    sort the each row of 2D array, a        
	## [b,I]=sortrows(a,1)                     I = np.argsort(a[:, 0]); b = a[I,:]     save the array a as array b with rows sorted by the first column
	## x = Z\y                                 x = linalg.lstsq(Z, y)                  perform a linear regression of the form Zx = y
	## decimate(x, q)                          signal.resample(x, np.ceil(len(x)/q))   downsample with low-pass filtering      
	## unique(a)                               np.unique(a)                            a vector of unique values in array a    
	## squeeze(a)                              a.squeeze()                             remove singleton dimensions of array a. Note that MATLAB will always return arrays of 2D or higher while NumPy will return arrays of 0D or higher
